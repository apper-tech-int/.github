name: ci

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY:
      AWS_REGION:
      AWS_ACCOUNT_ID:
      SONAR_TOKEN:
      SONAR_HOST_URL:


env:
  TAG_NAME: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/${{ github.event.repository.name }}:${{github.sha}}

jobs:
  code_climate:
    uses: bayer-int/actions-workflows/.github/workflows/trufflehog.yml@main
    
  sonarqube:
    name: sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: sonarsource/sonarqube-scan-action@v1.1.0
        with:
          projectBaseDir: src
          args: >
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true      
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build_and_push:
    name: build & push
    needs: 
      - sonarqube
      - clode_climate

    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2      

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: Dump github context
      #   run:   echo "$GITHUB_CONTEXT"
      #   shell: bash
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}               
             
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}    
      

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1              

      - name: check ecr repository
        run: |
          aws ecr describe-repositories --region ${{secrets.AWS_REGION}} --repository-names "${{ github.event.repository.name }}" || aws ecr create-repository --region ${{secrets.AWS_REGION}} --repository-name "${{ github.event.repository.name }}"

      - name: 'build container'
        run: |
          docker build \
            -t ${{ env.TAG_NAME }} \
            --label github.repository=${{ github.event.repository.name }} \
            --label github.repositoryUrl=${{github.repositoryUrl}} \
            --label github.sha="${{github.sha}}" \
            --label github.ref="${{github.ref}}" \
            --label github.event.sender.login="${{github.event.sender.login}}" \
            --label github.event.sender.url="${{github.event.sender.url}}" \
            .

      - name: 'push container'
        run: |
          docker push "${{ env.TAG_NAME }}"

  deploy_development:
    name: deploy development
    environment: development    
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2     

  deploy_homologation:
    name: deploy homologation
    environment: homologation    
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2     

  deploy_production:
    name: deploy production
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'hotfix/')
    environment: production    
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.2                      


        